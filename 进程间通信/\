#include<stdio.h>
#include<stdlib.h>
#include<signal.h>
#include<unistd.h>
#include<pthread.h>
#include<string.h>
static void sig_pipe(int);
#define MAXLINE 256 
int 
main(void)
{
    int n,fd1[2],fd2[2];
    pid_t pid;
    char line[MAXLINE];
    if(signal(SIGPIPE,sig_pipe)==SIG_ERR)
    {
        printf("signal error\n");
        exit(1);
    }
    if(pipe(fd1)<0 || pipe(fd2)<0)
    {
        printf("pipe error");
        exit(1);
    }
    if((pid = fork())<0)
    {
        printf("fork error\n");
        exit(1);
    }
    else if(pid>0)
    {
        close(fd1[0]);
        close(fd2[1]);
        while(fgets(line,MAXLINE,stdin)!=NULL)
        {
            n=strlen(line);
            if(write(fd1[1],line,n)!=n)
            {
                printf("write error to pipe");
                exit(1);
            }
            if((n = read(fd2[0],line,MAXLINE))<0)
            {
                printf("read error from pipe\n");
                exit(1);
            }
            if(n==0)
            {
                printf("child close pipe\n");
                break;
            }
            line[n]=0;    // null terminate
            if(fputs(line,stdout)==EOF)
            {
                printf("fputs error");
                exit(1);
            }
        }
        if(ferror(stdin))
        {
            printf("fgets error on stdin\n");
            exit(1);
        }
        exit(0);
    }
    else
    {
        close(fd1[1]);
        close(fd2[0]);
        if(fd1[0] != STDIN_FILENO)
        {
            if(dup2(fd1[0],STDIN_FILENO)!=STDIN_FILENO)
            {
                printf("dup2 error to stdin");
            }           
            close(fd1[0]);
        }
        if(fd2[1]!=STDOUT_FILENO)
        {
            if(dup2(fd2[1],STDOUT_FILENO)!=STDOUT_FILENO)
            {
                printf("dup2 error to stdout\n");
            }
            close(fd2[1]);
        }
     if(execl("./add2","add2",(char*)0)<0)
     {
         printf("execl error");
         exit(-1);
     } 
     exit(0);  
    }
    return 0;
}
static void   //如果写一个读端已被关闭的管道，就会残生sigpipe信号
sig_pipe(int signo)
{
    printf("SIGPIPE caugth\n");
    exit(1);
}
